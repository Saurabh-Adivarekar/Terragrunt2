name: Github Actions workflow with Terragrunt!

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to...'
        required: true
        type: environment

jobs:
  terragrunt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Install & Setup Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.32.0/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Run Terragrunt Plan
        working-directory: root/${{ github.event.inputs.environment }}
        run: |
          terragrunt init
          terragrunt plan

  manual_approval:
    needs: terragrunt
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Request Manual Approval
        run: echo "Please review the Terragrunt plan for ${{ github.event.inputs.environment }} and approve if everything looks good."

  apply:
    needs: manual_approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Install & Setup Terragrunt
        run: |
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.32.0/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Run Terragrunt Apply
        working-directory: root/${{ github.event.inputs.environment }}
        run: terragrunt apply -auto-approve
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets[github.event.inputs.environment == 'Dev' ? 'AWS_ACCESS_KEY_ID_DEV' : 'AWS_ACCESS_KEY_ID_PROD'] }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets[github.event.inputs.environment == 'Dev' ? 'AWS_SECRET_ACCESS_KEY_DEV' : 'AWS_SECRET_ACCESS_KEY_PROD'] }}


